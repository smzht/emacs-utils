#!/bin/bash
# -*- mode: sh; coding: utf-8-unix -*-

command_name=$(basename "$0")

function usage_exit() {
    cat << EOF >&2
Usage: $command_name [-q query] [file]
       $command_name -h
EOF
    exit $1
}

query_str=""

while getopts :hq: opt; do
    case $opt in
        h)
            usage_exit 0
            ;;
        q)
            query_str="$OPTARG"
            ;;
        \?)
            usage_exit 2
            ;;
    esac
done

shift $(($OPTIND - 1))

if [ $# -ne 0 -a $# -ne 1 ]; then
    usage_exit 2
fi

function message() {
    echo "$command_name: $1" >&2
    exit 1
}

if [ $# -eq 1 -a ! -r "$1" ]; then
    message '指定したファイルを読み込むことができません'
fi

temp1=$(mktemp -t "$command_name.XXXXXXXXXX")
temp2=$(mktemp -t "$command_name.XXXXXXXXXX")

trap 'rm -f "$temp1" "$temp2"' 0

epeco=$(cat << EOF
(progn
  (helm :sources (helm-build-async-source "Epeco"
                   :candidates-process (lambda ()
                                         (start-process-shell-command "epeco" nil "tail -n +1 -f $temp1"))
                   :candidate-transformer (lambda (candidates)
                                            (cl-loop for c in candidates
                                                     when (helm-mm-match c) collect c))
                   :candidate-number-limit 1000 ; helm-candidate-number-limit の値を置き換える
                   :action (helm-make-actions "Output" (lambda (candidate)
                                                         (with-temp-buffer
                                                           (dolist (cand (helm-marked-candidates))
                                                             (insert (format "%s\n" cand)))
                                                           (write-file "$temp2"))
                                                         (message ""))))
        :input "$query_str"
        :buffer "*helm epeco*")
  )
EOF
)

if [ $# -eq 0 ]; then
    cat
else
    cat "$1"
fi > "$temp1" | (emacsclient -e "$epeco" > /dev/null; cat "$temp2")
